// tslint:disable:typedef-whitespace
// tslint:disable:quotemark
// tslint:disable:no-any
import axios, { AxiosPromise, AxiosRequestConfig  } from 'axios';

const interpolate = (s: string, obj: object | null) => {
    if (!obj || !s) {
        return s;
    }

    for (const objKey of Object.keys(obj)) {
        const strKey = '{' + objKey + '}';
        if (s.indexOf(strKey) !== -1) {
            s = s.replace(strKey, obj[objKey]);
            delete obj[objKey];
        }
    }

    return s;
};

export interface RequestOptions {
	baseUrl: string;
	headers: {};
}

const defaultOptions = {
	baseUrl: '{{{baseUrl}}}',
	headers: {}
};

function strEnum<T extends string>(o: Array<T>): { [K in T]: K } {
    return o.reduce((res, key) => {
        res[key] = key;
        return res;
	// tslint:disable-next-line:align
    }, Object.create(null));
}

export const Operations = strEnum([
{{#methods}}
    '{{& methodName}}',
{{/methods}}	
]);
export type Operations = keyof typeof Operations;

{{#definitions}}
export interface {{&name}} {{#tsType}}{{> type}}{{/tsType}}
{{/definitions}}

{{#methods}}
    {{> method}}
{{/methods}}